{"version":3,"file":"smartmenu.min.js","sources":["../src/smartmenu.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Theme Boost Union - JS for smart menu to realize the third level submenu support.\n *\n * @module     theme_boost_union/smartmenu\n * @copyright  2023 bdecent GmbH <https://bdecent.de>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\ndefine([\"jquery\", \"core/moremenu\"], function($) {\n\n    const Selectors = {\n        dropDownMenu: \"dropdownmoremenu\",\n        forceOut: \"force-menu-out\",\n        navLink: \"nav-link\",\n        dropDownItem: \"dropdown-item\",\n        classes: {\n            dropDownMenuList: \".dropdownmoremenu ul.dropdown-menu\",\n            forceOut: \".dropdownmoremenu .force-menu-out\"\n        }\n    };\n\n    /**\n     * Implement the second level of submenu support.\n     * Find the submenus inside the dropdown, add an event listener for click event which - on the click - shows the submenu list.\n     */\n    const addSubmenu = () => {\n        // Fetch the list of submenus from moremenu.\n        var submenu = document.querySelectorAll('nav.moremenu .dropdown-submenu');\n        if (submenu !== null) {\n            submenu.forEach((item) => {\n                // Add event listener to show the submenu on click.\n                item.addEventListener('click', (e) => {\n                    var target = e.currentTarget;\n                    // Hide the shown menu.\n                    hideSubmenus(target);\n                    target.classList.toggle('show');\n                    // Prevent hiding the parent menu.\n                    e.stopPropagation();\n                });\n            });\n        }\n\n        // Hide the submenus when its parent dropdown is hidden.\n        $(document).on('hidden.bs.dropdown', e => {\n            var target = e.relatedTarget.parentNode;\n            var submenus = target.querySelectorAll('.dropdown-submenu.show');\n            if (submenus !== null) {\n                submenus.forEach((e) => e.classList.remove('show'));\n            }\n        });\n\n        // Provide the third level menu support inside the more menu.\n        // StopPropagation used in the toggledropdown method on Moremenu.js, It prevents the opening of the third level menus.\n        // Used the document delegation method to fetch the click on moremenu and submenu.\n        document.addEventListener('click', (e) => {\n            var dropdown = e.target.closest('.dropdownmoremenu');\n            var subMenu = e.target.closest('.dropdown-submenu');\n            if (dropdown && subMenu !== null) {\n                // Hide the previously opend submenus. before open the new one.\n                dropdown.querySelectorAll('.dropdown-submenu.show').forEach((menu) => {\n                    menu.classList.remove('show');\n                });\n                subMenu.classList.toggle('show');\n            }\n\n            // Hide the opened menus before open the other menus.\n            var dropdownMenu = e.target.parentNode.classList.contains('dropdown');\n            if (dropdown && dropdownMenu) {\n                dropdown.querySelectorAll('.dropdown-menu.show').forEach((menu) => {\n                    // Hide the opened menus in more menu.\n                    if (menu != e.target.closest('.dropdown-menu')) {\n                        menu.classList.remove('show');\n                    }\n                });\n            }\n\n        }, true);\n\n        // Prevent the closing of dropdown during the click on help icon.\n        var helpIcon = document.querySelectorAll('.moremenu .dropdown .menu-helpicon');\n        if (helpIcon !== null) {\n            helpIcon.forEach((icon) => {\n                icon.addEventListener('click', (e) => {\n                    e.stopPropagation();\n                });\n            });\n        }\n    };\n\n    /**\n     * Hide visible submenus before display new submenu.\n     *\n     * @param {Selector} target\n     */\n    const hideSubmenus = (target) => {\n        var visibleMenu = document.querySelectorAll('nav.moremenu .dropdown-submenu.show');\n        if (visibleMenu !== null) {\n            visibleMenu.forEach((el) => {\n                if (el != target) {\n                    el.classList.remove('show');\n                }\n            });\n        }\n    };\n\n    /**\n     * Make the no wrapped card menus scroll using swipe or drag.\n     */\n    const cardScroll = () => {\n        var cards = document.querySelectorAll('.card-dropdown.card-overflow-no-wrap');\n        if (cards !== null) {\n            var scrollStart; // Verify the mouse is clicked and still in click not released.\n            var scrollMoved; // Prevent the click on scrolling.\n            let startPos, scrollPos;\n\n            cards.forEach((card) => {\n                var scrollElement = card.querySelector('.dropdown-menu');\n\n                scrollElement.addEventListener('mousedown', (e) => {\n                    scrollStart = true;\n                    var target = e.currentTarget.querySelector('.card-block-wrapper');\n                    startPos = e.pageX;\n                    scrollPos = target.scrollLeft;\n                });\n\n                scrollElement.addEventListener('mousemove', (e) => {\n                    e.preventDefault();\n                    if (!scrollStart) {\n                        return;\n                    }\n                    scrollMoved = true;\n                    var target = e.currentTarget.querySelector('.card-block-wrapper');\n                    const scroll = e.pageX - startPos;\n                    target.scrollLeft = scrollPos - scroll;\n                });\n\n                scrollElement.addEventListener('click', (e) => {\n                    if (scrollMoved) {\n                        e.preventDefault();\n                        scrollMoved = false;\n                    }\n                    e.stopPropagation();\n                });\n                scrollElement.addEventListener('mouseleave', () => {\n                    scrollStart = false;\n                    scrollMoved = false;\n                });\n                scrollElement.addEventListener('mouseup', () => {\n                    scrollStart = false;\n                });\n            });\n        }\n    };\n\n    /**\n     * Move the menubar and primary navigation menu items from more menu.\n     */\n    const autoCollapse = () => {\n        var primaryNav = document.querySelector('.primary-navigation ul.more-nav');\n        if (primaryNav != undefined) {\n            setOutMenuPositions(primaryNav); // Create a data flag to maintain the original position of the menus.\n            moveOutMoreMenu(primaryNav);\n        }\n\n\n        var menuBar = document.querySelector('nav.menubar ul.more-nav');\n        if (menuBar != undefined) {\n            setOutMenuPositions(menuBar);\n            moveOutMoreMenu(menuBar);\n        }\n\n        window.onresize = (e) => {\n            // Verify the event is original by browser resize.\n            if (e.isTrusted) {\n                moveOutMoreMenu(primaryNav);\n                moveOutMoreMenu(menuBar);\n            }\n        };\n    };\n\n    /**\n     * Finds and sets the positions of all menus before moving them,\n     * helping to maintain the positions of the menus after being moved out from the moremenu.\n     *\n     * @param {HTMLElement} navMenu The navbar container.\n     */\n    const setOutMenuPositions = (navMenu) => {\n\n        if (navMenu === undefined || navMenu === null) {\n            return;\n        }\n\n        // Find all menu items excluding the dropdownmoremenu class.\n        var li = Array.from(navMenu.children).filter((e) => !e.classList.contains(Selectors.dropDownMenu));\n\n        // Initialize the position variable.\n        var position = 0;\n\n        // Loop through each menu item and set its original position.\n        li.forEach((menu) => {\n            position = li.indexOf(menu);\n            menu.dataset.orgposition = position; // Store the original position in the menu's dataset.\n        });\n\n        // Maintain the positions of the menus inside the moremenu from the last position of the outside menus.\n        var moreMenu = navMenu.querySelector(Selectors.classes.dropDownMenuList);\n        Array.from(moreMenu.children).forEach((menu) => {\n            menu.dataset.orgposition = position++;\n        });\n    };\n\n    /**\n     * Rearranges the menus placed outside the more menu based on their original positions.\n     *\n     * @param {HTMLElement} navMenu The navbar container.\n     */\n    const reArrangeMenuOrgPositions = (navMenu) => {\n        // Retrieve all menu items and sort them based on their original positions.\n        var li = Array.from(navMenu.children).sort((a, b) => a.dataset.orgposition - b.dataset.orgposition);\n        // Append the sorted menu items back to the navbar container.\n        li.forEach((menu) => navMenu.appendChild(menu));\n    };\n\n    /**\n     * Move the items from more menu, items which is set to force outside more menu.\n     * Remove those items from more menu and insert the menu before the last normal item.\n     * Find the length and children's length to insert the out menus in that positions.\n     * Move the non forced more menu to moremenu to make the menu alignment.\n     * Rerun the more menu it will more the other normal menus into more menu to fix the alignmenu issue.\n     * After the menus are move out, rearrange menus to its original positions.\n     *\n     * @param {HTMLElement} navMenu The navbar container.\n     */\n    const moveOutMoreMenu = (navMenu) => {\n\n        if (navMenu === null) {\n            return;\n        }\n\n        // Filter the available menus to move inside of more menu.\n        var li = Array.from(navMenu.children).reverse().filter(\n            (e) => !e.classList.contains(Selectors.forceOut) && !e.classList.contains(Selectors.dropDownMenu));\n\n        // Alternate menus are not available for move to moremenu, stop make the menus move to outside.\n        if (li.length < 1) {\n            return;\n        }\n\n        var outMenus = navMenu.querySelectorAll(Selectors.classes.forceOut);\n        var menuslist = [];\n\n        if (outMenus === null) {\n            return;\n        }\n\n        outMenus.forEach((menu) => {\n            menu.querySelector('a').classList.remove(Selectors.dropDownItem);\n            menu.querySelector('a').classList.add(Selectors.navLink);\n\n            menuslist.push(menu);\n            menu.parentNode.removeChild(menu);\n        });\n\n        // Insert the stored menus before the more menu.\n        var moveMenus = [];\n        menuslist.forEach((menu) => {\n            if (navMenu.insertBefore(menu, navMenu.lastElementChild) && li.length > 0) {\n                // Instead of move into moremenu, place the menus before the moremenu will moved to moremenu by moremenu.js.\n                moveMenus.push(li.shift());\n            }\n        });\n\n        // Move the non forced more menu before the moremenu to make the menu alignment.\n        moveMenus.forEach((menu) => {\n            navMenu.insertBefore(menu, navMenu.lastElementChild);\n        });\n\n        window.dispatchEvent(new Event('resize')); // Dispatch the resize event to create more menu.\n\n        // After the menus are move out, rearrange menus to its original positions.\n        reArrangeMenuOrgPositions(navMenu);\n    };\n\n    return {\n        init: () => {\n            addSubmenu();\n            cardScroll();\n            autoCollapse();\n        }\n    };\n});\n"],"names":["define","$","Selectors","dropDownMenuList","forceOut","hideSubmenus","target","visibleMenu","document","querySelectorAll","forEach","el","classList","remove","setOutMenuPositions","navMenu","li","Array","from","children","filter","e","contains","position","menu","indexOf","dataset","orgposition","moreMenu","querySelector","moveOutMoreMenu","reverse","length","outMenus","menuslist","add","push","parentNode","removeChild","moveMenus","insertBefore","lastElementChild","shift","window","dispatchEvent","Event","sort","a","b","appendChild","reArrangeMenuOrgPositions","init","submenu","item","addEventListener","currentTarget","toggle","stopPropagation","on","submenus","relatedTarget","dropdown","closest","subMenu","dropdownMenu","helpIcon","icon","addSubmenu","cards","scrollStart","scrollMoved","startPos","scrollPos","card","scrollElement","pageX","scrollLeft","preventDefault","scroll","cardScroll","primaryNav","undefined","menuBar","onresize","isTrusted","autoCollapse"],"mappings":"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"}